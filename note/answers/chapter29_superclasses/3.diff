diff --git a/c/chunk.h b/c/chunk.h
index 3fe9250..b035513 100644
--- a/c/chunk.h
+++ b/c/chunk.h
@@ -19,7 +19,6 @@ typedef enum {
   OP_SET_UPVALUE,
   OP_GET_PROPERTY,
   OP_SET_PROPERTY,
-  OP_GET_SUPER,
   OP_EQUAL,
   OP_GREATER,
   OP_LESS,
@@ -35,7 +34,7 @@ typedef enum {
   OP_LOOP,
   OP_CALL,
   OP_INVOKE,
-  OP_SUPER_INVOKE,
+  OP_INNER,
   OP_CLOSURE,
   OP_CLOSE_UPVALUE,
   OP_RETURN,
diff --git a/c/compiler.c b/c/compiler.c
index 78ce52d..125bf8c 100644
--- a/c/compiler.c
+++ b/c/compiler.c
@@ -69,7 +69,9 @@ typedef struct Compiler {
 
 typedef struct ClassCompiler {
   struct ClassCompiler* enclosing;
+  uint16_t id;
   Token name;
+  Token methodName;
   bool hasSuperclass;
 } ClassCompiler;
 
@@ -484,27 +486,27 @@ static Token syntheticToken(const char* text) {
   token.length = (int)strlen(text);
   return token;
 }
-static void super_(bool canAssign) {
+static void inner(bool canAssign) {
   if (currentClass == NULL) {
-    error("Cannot use 'super' outside of a class.");
-  } else if (!currentClass->hasSuperclass) {
-    error("Cannot use 'super' in a class with no superclass.");
+    error("Cannot use 'inner' outside of a class.");
   }
 
-  consume(TOKEN_DOT, "Expect '.' after 'super'.");
-  consume(TOKEN_IDENTIFIER, "Expect superclass method name.");
-  uint8_t name = identifierConstant(&parser.previous);
-
   namedVariable(syntheticToken("this"), false);
-  if (match(TOKEN_LEFT_PAREN)) {
-    uint8_t argCount = argumentList();
-    namedVariable(syntheticToken("super"), false);
-    emitBytes(OP_SUPER_INVOKE, name);
-    emitByte(argCount);
-  } else {
-    namedVariable(syntheticToken("super"), false);
-    emitBytes(OP_GET_SUPER, name);
+  consume(TOKEN_LEFT_PAREN, "Expect argument list after 'inner'.");
+  uint8_t argCount = argumentList();
+  
+  uint8_t constant = 0;
+  if (currentClass != NULL) {
+    char name[256];
+    sprintf(name, "%.*s@%x",
+        currentClass->methodName.length,
+        currentClass->methodName.start,
+        currentClass->id);
+    constant = makeConstant(OBJ_VAL(copyString(name, (int)strlen(name))));
   }
+
+  emitBytes(OP_INNER, constant);
+  emitByte(argCount);
 }
 static void this_(bool canAssign) {
   if (currentClass == NULL) {
@@ -561,7 +563,7 @@ ParseRule rules[] = {
   { NULL,     or_,     PREC_OR },         // TOKEN_OR
   { NULL,     NULL,    PREC_NONE },       // TOKEN_PRINT
   { NULL,     NULL,    PREC_NONE },       // TOKEN_RETURN
-  { super_,   NULL,    PREC_NONE },       // TOKEN_SUPER
+  { inner,    NULL,    PREC_NONE },       // TOKEN_INNER
   { this_,    NULL,    PREC_NONE },       // TOKEN_THIS
   { literal,  NULL,    PREC_NONE },       // TOKEN_TRUE
   { NULL,     NULL,    PREC_NONE },       // TOKEN_VAR
@@ -638,6 +640,7 @@ static void function(FunctionType type) {
 }
 static void method() {
   consume(TOKEN_IDENTIFIER, "Expect method name.");
+  currentClass->methodName = parser.previous;
   uint8_t constant = identifierConstant(&parser.previous);
 
   FunctionType type = TYPE_METHOD;
@@ -656,12 +659,17 @@ static void classDeclaration() {
   declareVariable();
 
   emitBytes(OP_CLASS, nameConstant);
+  uint16_t id = vm.nextClassID++;
+  emitByte((id >> 8) & 0xff);
+  emitByte(id & 0xff);
+  
   defineVariable(nameConstant);
 
   ClassCompiler classCompiler;
   classCompiler.name = parser.previous;
   classCompiler.hasSuperclass = false;
   classCompiler.enclosing = currentClass;
+  classCompiler.id = id;
   currentClass = &classCompiler;
 
   if (match(TOKEN_LESS)) {
@@ -672,10 +680,6 @@ static void classDeclaration() {
       error("A class cannot inherit from itself.");
     }
 
-    beginScope();
-    addLocal(syntheticToken("super"));
-    defineVariable(0);
-
     namedVariable(className, false);
     emitByte(OP_INHERIT);
     classCompiler.hasSuperclass = true;
@@ -689,10 +693,6 @@ static void classDeclaration() {
   consume(TOKEN_RIGHT_BRACE, "Expect '}' after class body.");
   emitByte(OP_POP);
 
-  if (classCompiler.hasSuperclass) {
-    endScope();
-  }
-
   currentClass = currentClass->enclosing;
 }
 static void funDeclaration() {
diff --git a/c/debug.c b/c/debug.c
index ce23cbc..321a133 100644
--- a/c/debug.c
+++ b/c/debug.c
@@ -82,8 +82,6 @@ int disassembleInstruction(Chunk* chunk, int offset) {
       return constantInstruction("OP_GET_PROPERTY", chunk, offset);
     case OP_SET_PROPERTY:
       return constantInstruction("OP_SET_PROPERTY", chunk, offset);
-    case OP_GET_SUPER:
-      return constantInstruction("OP_GET_SUPER", chunk, offset);
     case OP_EQUAL:
       return simpleInstruction("OP_EQUAL", offset);
     case OP_GREATER:
@@ -114,8 +112,8 @@ int disassembleInstruction(Chunk* chunk, int offset) {
       return byteInstruction("OP_CALL", chunk, offset);
     case OP_INVOKE:
       return invokeInstruction("OP_INVOKE", chunk, offset);
-    case OP_SUPER_INVOKE:
-      return invokeInstruction("OP_SUPER_INVOKE", chunk, offset);
+    case OP_INNER:
+      return invokeInstruction("OP_INNER", chunk, offset);
     case OP_CLOSURE: {
       offset++;
       uint8_t constant = chunk->code[offset++];
diff --git a/c/object.c b/c/object.c
index 4ba65f0..976fb4a 100644
--- a/c/object.c
+++ b/c/object.c
@@ -31,9 +31,10 @@ ObjBoundMethod* newBoundMethod(Value receiver, ObjClosure* method) {
   bound->method = method;
   return bound;
 }
-ObjClass* newClass(ObjString* name) {
+ObjClass* newClass(ObjString* name, uint16_t id) {
   ObjClass* klass = ALLOCATE_OBJ(ObjClass, OBJ_CLASS);
   klass->name = name; // [klass]
+  klass->id = id;
   initTable(&klass->methods);
   return klass;
 }
@@ -47,6 +48,7 @@ ObjClosure* newClosure(ObjFunction* function) {
   closure->function = function;
   closure->upvalues = upvalues;
   closure->upvalueCount = function->upvalueCount;
+  closure->classID = 0xffff;
   return closure;
 }
 ObjFunction* newFunction() {
diff --git a/c/object.h b/c/object.h
index dddcfe1..c560468 100644
--- a/c/object.h
+++ b/c/object.h
@@ -74,11 +74,14 @@ typedef struct {
   ObjFunction* function;
   ObjUpvalue** upvalues;
   int upvalueCount;
+  // If this closure is a method, the ID of the class that declares it.
+  uint16_t classID;
 } ObjClosure;
 
 typedef struct sObjClass {
   Obj obj;
   ObjString* name;
+  uint16_t id;
   Table methods;
 } ObjClass;
 
@@ -95,7 +98,7 @@ typedef struct {
 } ObjBoundMethod;
 
 ObjBoundMethod* newBoundMethod(Value receiver, ObjClosure* method);
-ObjClass* newClass(ObjString* name);
+ObjClass* newClass(ObjString* name, uint16_t id);
 ObjClosure* newClosure(ObjFunction* function);
 ObjFunction* newFunction();
 ObjInstance* newInstance(ObjClass* klass);
diff --git a/c/scanner.c b/c/scanner.c
index a577951..69b14ee 100644
--- a/c/scanner.c
+++ b/c/scanner.c
@@ -116,12 +116,18 @@ static TokenType identifierType()
         }
       }
       break;
-    case 'i': return checkKeyword(1, 1, "f", TOKEN_IF);
+    case 'i':
+      if (scanner.current - scanner.start > 1) {
+        switch (scanner.start[1]) {
+          case 'f': return TOKEN_IF;
+          case 'n': return checkKeyword(2, 3, "ner", TOKEN_INNER);
+        }
+      }
+      break;
     case 'n': return checkKeyword(1, 2, "il", TOKEN_NIL);
     case 'o': return checkKeyword(1, 1, "r", TOKEN_OR);
     case 'p': return checkKeyword(1, 4, "rint", TOKEN_PRINT);
     case 'r': return checkKeyword(1, 5, "eturn", TOKEN_RETURN);
-    case 's': return checkKeyword(1, 4, "uper", TOKEN_SUPER);
     case 't':
       if (scanner.current - scanner.start > 1) {
         switch (scanner.start[1]) {
diff --git a/c/scanner.h b/c/scanner.h
index 089c7c3..a8f82ec 100644
--- a/c/scanner.h
+++ b/c/scanner.h
@@ -20,7 +20,7 @@ typedef enum {
   // Keywords.
   TOKEN_AND, TOKEN_CLASS, TOKEN_ELSE, TOKEN_FALSE,
   TOKEN_FOR, TOKEN_FUN, TOKEN_IF, TOKEN_NIL, TOKEN_OR,
-  TOKEN_PRINT, TOKEN_RETURN, TOKEN_SUPER, TOKEN_THIS,
+  TOKEN_PRINT, TOKEN_RETURN, TOKEN_INNER, TOKEN_THIS,
   TOKEN_TRUE, TOKEN_VAR, TOKEN_WHILE,
 
   TOKEN_ERROR,
diff --git a/c/vm.c b/c/vm.c
index 626f8c2..e2431c6 100644
--- a/c/vm.c
+++ b/c/vm.c
@@ -60,6 +60,8 @@ void initVM() {
   vm.grayCount = 0;
   vm.grayCapacity = 0;
   vm.grayStack = NULL;
+  
+  vm.nextClassID = 0;
 
   initTable(&vm.globals);
   initTable(&vm.strings);
@@ -175,6 +177,20 @@ static bool invoke(ObjString* name, int argCount) {
 
   return invokeFromClass(instance->klass, name, argCount);
 }
+static bool invokeInner(ObjString* name, int argCount) {
+  Value receiver = peek(argCount);
+  ObjInstance* instance = AS_INSTANCE(receiver);
+
+  Value method;
+  if (!tableGet(&instance->klass->methods, name, &method)) {
+    // No inner method, so discard args and return nil.
+    vm.stackTop -= argCount + 1;
+    push(NIL_VAL);
+    return true;
+  }
+
+  return call(AS_CLOSURE(method), argCount);
+}
 static bool bindMethod(ObjClass* klass, ObjString* name) {
   Value method;
   if (!tableGet(&klass->methods, name, &method)) {
@@ -221,6 +237,18 @@ static void closeUpvalues(Value* last) {
 static void defineMethod(ObjString* name) {
   Value method = peek(0);
   ObjClass* klass = AS_CLASS(peek(1));
+  
+  AS_CLOSURE(method)->classID = klass->id;
+  
+  ObjString* originalName = name;
+  Value existing;
+  while (tableGet(&klass->methods, name, &existing)) {
+    ObjClosure* existingClosure = AS_CLOSURE(existing);
+    char newNameChars[256];
+    sprintf(newNameChars, "%s@%x", originalName->chars, existingClosure->classID);
+    name = copyString(newNameChars, (int)strlen(newNameChars));
+  }
+  
   tableSet(&klass->methods, name, method);
   pop();
 }
@@ -378,15 +406,6 @@ static InterpretResult run() {
         break;
       }
 
-      case OP_GET_SUPER: {
-        ObjString* name = READ_STRING();
-        ObjClass* superclass = AS_CLASS(pop());
-        if (!bindMethod(superclass, name)) {
-          return INTERPRET_RUNTIME_ERROR;
-        }
-        break;
-      }
-
       case OP_EQUAL: {
         Value b = pop();
         Value a = pop();
@@ -466,12 +485,11 @@ static InterpretResult run() {
         frame = &vm.frames[vm.frameCount - 1];
         break;
       }
-
-      case OP_SUPER_INVOKE: {
+      
+      case OP_INNER: {
         ObjString* method = READ_STRING();
         int argCount = READ_BYTE();
-        ObjClass* superclass = AS_CLASS(pop());
-        if (!invokeFromClass(superclass, method, argCount)) {
+        if (!invokeInner(method, argCount)) {
           return INTERPRET_RUNTIME_ERROR;
         }
         frame = &vm.frames[vm.frameCount - 1];
@@ -517,9 +535,12 @@ static InterpretResult run() {
         break;
       }
 
-      case OP_CLASS:
-        push(OBJ_VAL(newClass(READ_STRING())));
+      case OP_CLASS: {
+        ObjString* name = READ_STRING();
+        uint16_t id = READ_SHORT();
+        push(OBJ_VAL(newClass(name, id)));
         break;
+      }
 
       case OP_INHERIT: {
         Value superclass = peek(1);
diff --git a/c/vm.h b/c/vm.h
index 9ce5805..56c48a4 100644
--- a/c/vm.h
+++ b/c/vm.h
@@ -32,6 +32,8 @@ typedef struct {
   int grayCount;
   int grayCapacity;
   Obj** grayStack;
+  
+  uint16_t nextClassID;
 } VM;
 
 typedef enum {
diff --git a/test/inner/arguments.lox b/test/inner/arguments.lox
new file mode 100644
index 0000000..b8032b4
--- /dev/null
+++ b/test/inner/arguments.lox
@@ -0,0 +1,16 @@
+class A {
+  method(a, b) {
+    print "A.method " + a + " " + b;
+    inner(b, a);
+  }
+}
+
+class B < A {
+  method(a, b) {
+    print "B.method " + a + " " + b;
+  }
+}
+
+B().method("first", "second");
+// expect: A.method first second
+// expect: B.method second first
diff --git a/test/inner/inner_at_top_level.lox b/test/inner/inner_at_top_level.lox
new file mode 100644
index 0000000..9d3756f
--- /dev/null
+++ b/test/inner/inner_at_top_level.lox
@@ -0,0 +1 @@
+inner("bar"); // Error at 'inner': Cannot use 'inner' outside of a class.
diff --git a/test/inner/inner_in_top_level_function.lox b/test/inner/inner_in_top_level_function.lox
new file mode 100644
index 0000000..5201e64
--- /dev/null
+++ b/test/inner/inner_in_top_level_function.lox
@@ -0,0 +1,3 @@
+fun foo() {
+  inner("arg"); // Error at 'inner': Cannot use 'inner' outside of a class.
+}
diff --git a/test/inner/missing_argument_list.lox b/test/inner/missing_argument_list.lox
new file mode 100644
index 0000000..78e1b9a
--- /dev/null
+++ b/test/inner/missing_argument_list.lox
@@ -0,0 +1,5 @@
+class A {
+  method() {
+    inner; // Error at ';': Expect argument list after 'inner'.
+  }
+}
diff --git a/test/inner/no_inner.lox b/test/inner/no_inner.lox
new file mode 100644
index 0000000..7483e21
--- /dev/null
+++ b/test/inner/no_inner.lox
@@ -0,0 +1,14 @@
+class A {
+  method(a) {
+    print inner();
+    print inner(1, 2, 3);
+    print a;
+  }
+}
+
+class B < A {}
+
+B().method("arg");
+// expect: nil
+// expect: nil
+// expect: arg
diff --git a/test/inner/simple.lox b/test/inner/simple.lox
new file mode 100644
index 0000000..6801a61
--- /dev/null
+++ b/test/inner/simple.lox
@@ -0,0 +1,18 @@
+class A {
+  method() {
+    print "A.method() before";
+    inner();
+    print "A.method() after";
+  }
+}
+
+class B < A {
+  method() {
+    print "B.method()";
+  }
+}
+
+B().method();
+// expect: A.method() before
+// expect: B.method()
+// expect: A.method() after
